package dc.human.kimbanbagi.tableJava.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import dc.human.kimbanbagi.tableJava.common.DBConnectionManager;
import dc.human.kimbanbagi.tableJava.dto.*;

/*

PROJECT        : tablejava
PROGRAM ID    : NotificationDAO.java
PROGRAM NAME    : 알림 dao
DESCRIPTION    : 알림 페이지 관련 sql문 처리
AUTHOR        : 박지민
CREATED DATE    : 2024.06.05.
HISTORY
======================================================
DATE     NAME           DESCRIPTION
2024.06.05   박지민        init

*/

public class NotificationDAO {
	private Connection conn;
	int row=0; // insert 또는 update문이 잘 실행되었는지 확인할 때 쓰이는 변수

	//update 또는 insert 시 updated_date / created_date 칼럼에 사용
	java.util.Date now = new java.util.Date();
	Date sqlDate = new Date(now.getTime());
	
	
	// 알림 메세지에 추가 될 사용자, 사장님 별 코멘드 enum
	public enum Comments {
		U_BOOK_A("예약 신청이 완료 되었습니다."),
		O_BOOK_A("새로운 예약이 들어왔습니다."),
		BOOK_C("예약이 확정 되었습니다."),
		C_BOOK("예약이 취소 되었습니다."),
		U_BOOK_C("손님 측에서 예약을 취소했습니다."),
		O_BOOK_C("식당 측에서 예약을 취소했습니다."),
		BOOK_E("예약이 종료 되었습니다."),
		U_WAIT_A("웨이팅 신청이 완료 되었습니다."),
		O_WAIT_A("새로운 대기 팀이 있습니다."),
		WAIT_C("차례가 되었습니다. 식당에 방문해주세요."),
		U_WAIT_C("손님 측에서 웨이팅을 취소했습니다."),
		O_WAIT_C("식당 측에서 예약을 취소했습니다.");
		
		private final String value;
		
		Comments(String value){
			this.value=value;
		}
		
		public String getValue() {
			return value;
		}
	}
	
	Comments cmts;
	
	// 사용자의 알림 내역을 가져오는 메소드
	public List<NotificationDTO> getNotificationList (String userId) {
		List<NotificationDTO> dtoList = new ArrayList<>();
		
		try {
			conn = DBConnectionManager.getConnection();
			
			String sql = "SELECT "
					+ "				user_id,"
					+ "				restaurant_id,"
					+ "				restaurant_name,"
					+ "				reservation_status,"
					+ "				reservation_date,"
					+ "				reservation_time,"
					+ "				adult_count,"
					+ "				kids_count,"
					+ "				waiting_number,"
					+ "				head_count,"
					+ "				comments "
					+ "FROM notification "
					+ "WHERE user_id=?";
			
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
				NotificationDTO dto = new NotificationDTO();
				
				dto.setuId(rs.getString("user_id"));
				dto.setrId(rs.getString("restaurant_id"));
				dto.setrName(rs.getString("restaurant_name"));
				dto.setrStatus(rs.getString("reservation_status"));
				dto.setrDate(rs.getString("reservation_date"));
				dto.setrTime(rs.getString("reservation_time"));
				dto.setaCount(rs.getString("adult_count"));
				dto.setkCount(rs.getString("kids_count"));
				dto.setwNumber(rs.getString("waiting_number"));
				dto.sethCount(rs.getString("head_count"));
				
				cmts = Comments.valueOf(rs.getString("comments"));
				dto.setComments(cmts.name());
				
				dtoList.add(dto);
			}
			
			conn.close();
			pstmt.close();
			rs.close();
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		return dtoList;
	}
	
	// 사용자의 예약 신청을 처리하는 메소드
	// 사용자에게는 예약 신청이 완료 되었다는 알림이 가고
	// 사장님에게는 새로운 예약 신청이 들어왔다는 알림이 옴
	public int addBookNotification (BookDTO dto) {
		try {
			conn = DBConnectionManager.getConnection();
			
			String sql = "INSERT INTO notification "
					+ "				user_id,"
					+ "				restaurant_name,"
					+ "				comments,"
					+ "				created_date,"
					+ "				created_id "
					+ "VALUES (?, ?, ?, ?, ?)";
			
			PreparedStatement pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, dto.getUser_id());
			pstmt.setString(2, dto.getRestaurant_name());
			pstmt.setString(3, Comments.U_BOOK_A.getValue());
			pstmt.setDate(4, sqlDate);
			pstmt.setString(5, dto.getUser_id());
			
			row = pstmt.executeUpdate();
			
			if(row!=0) {
				sql = "INSERT INTO notification "
						+ "				restaurant_id,"
						+ "				restaurant_name,"
						+ "				comments,"
						+ "				created_date,"
						+ "				created_id "
						+ "VALUES (?, ?, ?, ?, ?)";
				
				pstmt = conn.prepareStatement(sql);
				
				pstmt.setString(1, dto.getRestaurant_id());
				pstmt.setString(2, dto.getRestaurant_name());
				pstmt.setString(3, Comments.O_BOOK_A.getValue());
				pstmt.setDate(4, sqlDate);
				pstmt.setString(5, dto.getUser_id());
				
				row = pstmt.executeUpdate();
			}else {
				System.out.println("notification insert error");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		return row;
	}
	
	// 예약 확정을 처리하는 메소드
	// 사용자에게 예약이 확정되었다는 알림이 감
	public int confirmBook (BookDTO dto) {
		try {
			conn = DBConnectionManager.getConnection();
			
			String sql = "INSERT INTO notification "
					+ "				user_id,"
					+ "				restaurant_name,"
					+ "				comments,"
					+ "				created_date,"
					+ "				created_id "
					+ "VALUES (?, ?, ?, ?, ?)";
			
			PreparedStatement pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, dto.getUser_id());
			pstmt.setString(2, dto.getRestaurant_name());
			pstmt.setString(3, Comments.BOOK_C.getValue());
			pstmt.setDate(4, sqlDate);
			pstmt.setString(5, dto.getUser_id());
			
			row = pstmt.executeUpdate();
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		return row;
	}
	
	// 사용자의 예약 취소를 처리하는 메소드
	// 사용자에게는 예약이 취소 되었다는 알림이 가고
	// 사장님에게는 사용자 측에서 취소 되었다는 알림이 감
	public int bookCancelFromUser (BookDTO dto) {
		try {
			conn = DBConnectionManager.getConnection();
			
			String sql = "INSERT INTO notification "
					+ "				user_id,"
					+ "				restaurant_name,"
					+ "				comments,"
					+ "				created_date,"
					+ "				created_id "
					+ "VALUES (?, ?, ?, ?, ?)";
			
			PreparedStatement pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, dto.getUser_id());
			pstmt.setString(2, dto.getRestaurant_name());
			pstmt.setString(3, Comments.C_BOOK.getValue());
			pstmt.setDate(4, sqlDate);
			pstmt.setString(5, dto.getUser_id());
			
			row = pstmt.executeUpdate();
			
			if(row!=0) {
				sql = "INSERT INTO notification "
						+ "				restaurant_id,"
						+ "				restaurant_name,"
						+ "				comments,"
						+ "				created_date,"
						+ "				created_id "
						+ "VALUES (?, ?, ?, ?, ?)";
				
				pstmt = conn.prepareStatement(sql);
				
				pstmt.setString(1, dto.getRestaurant_id());
				pstmt.setString(2, dto.getRestaurant_name());
				pstmt.setString(3, Comments.U_BOOK_C.getValue());
				pstmt.setDate(4, sqlDate);
				pstmt.setString(5, dto.getUser_id());
			}
			
		}catch(Exception e) {
			
		}
		return row;
	}
	
	// 사장님의 예약 취소를 처리하는 메소드
	// 사용자에게는 식당 측에서 예약을 취소했다는 알림이 가고
	// 사장님에게는 예약 취소가 완료되었다는 알림이 감
		public int bookCancelFromOwner (BookDTO dto) {
			try {
				conn = DBConnectionManager.getConnection();
				
				String sql = "INSERT INTO notification "
						+ "				user_id,"
						+ "				restaurant_name,"
						+ "				comments,"
						+ "				created_date,"
						+ "				created_id "
						+ "VALUES (?, ?, ?, ?, ?)";
				
				PreparedStatement pstmt = conn.prepareStatement(sql);
				
				pstmt.setString(1, dto.getUser_id());
				pstmt.setString(2, dto.getRestaurant_name());
				pstmt.setString(3, Comments.O_BOOK_C.getValue());
				pstmt.setDate(4, sqlDate);
				pstmt.setString(5, dto.getUser_id());
				
				row = pstmt.executeUpdate();
				
				if(row!=0) {
					sql = "INSERT INTO notification "
							+ "				restaurant_id,"
							+ "				restaurant_name,"
							+ "				comments,"
							+ "				created_date,"
							+ "				created_id "
							+ "VALUES (?, ?, ?, ?, ?)";
					
					pstmt = conn.prepareStatement(sql);
					
					pstmt.setString(1, dto.getRestaurant_id());
					pstmt.setString(2, dto.getRestaurant_name());
					pstmt.setString(3, Comments.C_BOOK.getValue());
					pstmt.setDate(4, sqlDate);
					pstmt.setString(5, dto.getUser_id());
				}
				
			}catch(Exception e) {
				
			}
			return row;
		}
}
