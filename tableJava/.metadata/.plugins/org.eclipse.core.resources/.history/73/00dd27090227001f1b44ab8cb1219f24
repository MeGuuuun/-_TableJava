package dc.human.kimbanbagi.tableJava.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import dc.human.kimbanbagi.tableJava.common.DBConnectionManager;
import dc.human.kimbanbagi.tableJava.dto.*;

/*

PROJECT        : tablejava
PROGRAM ID    : LoginDAO.java
PROGRAM NAME    : 로그인
DESCRIPTION    : 로그인 관련 sql문 처리
AUTHOR        : 김문정
CREATED DATE    : 2024.06.05.
HISTORY
======================================================
DATE     NAME           DESCRIPTION
2024.06.05   김문정        init

*/

public class LoginDAO {
	private Connection conn;
	
	//update 또는 insert 시 updated_date / created_date 칼럼에 사용
	java.util.Date now = new java.util.Date();
	Date sqlDate = new Date(now.getTime()); 
	
	public String match(String uid, String pw) {
		String id=uid;
		String pwd=pw;
		
		String result = null;
		
		try {
			conn = DBConnectionManager.getConnection();
			
			// *임시 비밀번호 테이블까지 join하여 대조하는 query문으로 수정
			String sql = "SELECT COUNT(*) AS cnt FROM users WHERE user_id=? AND user_pwd=?"; 
			
			PreparedStatement pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, id);
			pstmt.setString(2, pwd);
			
			ResultSet rs=pstmt.executeQuery();
			
			while(rs.next()) {
				int cnt=rs.getInt("cnt");
				
				// 로그인 정보 대조 성공
				if(cnt==1) {
					result = getRole(id); // 로그인한 사람이 사용자인지, 사장님인지 판별하는 메소드
					
				// 로그인 정보 대조 실패
				}else {
					System.out.println("정보를 찾지못했습니다.");
				}
			}
			
			conn.close();
			pstmt.close();
			rs.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return result;
	}
	
	// user_role( 사용자 or 사장님 )과 store_register(식당 등록 여부) 확인하는 메소드
	public String getRole(String id) {
		String role="";
		
		try {
			conn = DBConnectionManager.getConnection();
			
			String sql= "SELECT user_role FROM users WHERE user_id=?";
			
			PreparedStatement pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, id);
			
			ResultSet rs=pstmt.executeQuery();
			
			 while (rs.next()) {
				 role = rs.getString("user_role");
			 }
			
			 conn.close();
			 pstmt.close();
			 rs.close();
			 
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		 return role;
	}
	
	// 식당 등록 여부 확인하는 메소드
	public boolean getRegister(String id) {
		boolean result = false;
		
		try {
			conn = DBConnectionManager.getConnection();
			
			String sql = "SELECT store_register FROM users WHERE user_id=?";
			PreparedStatement pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, id);
			
			ResultSet rs=pstmt.executeQuery();
			
			while(rs.next()) {
				String reg = rs.getString("store_register");
				if(reg.equals("1")) result=true; 
			}
			
			conn.close();
			pstmt.close();
			rs.close();
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		return result;
	}
	
	// restaurant_id 얻는 메소드
	public String getRid(String id) {
		String rId="";
		
		try {
			conn = DBConnectionManager.getConnection();
			
			String sql = "SELECT restaurant_id FROM restaurants WHERE user_id=?";
			PreparedStatement pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, id);
			
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
				rId = rs.getString("restaurant_id");
			}
			
			conn.close();
			pstmt.close();
			rs.close();
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		return rId;
	}

}
